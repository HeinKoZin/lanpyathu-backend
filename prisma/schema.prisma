// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator graphql {
//   provider = "graphql-schema-generator"
//   createCRUD = "true"
//   output = "./generated/graphql"
// }

// generator zod {
//   provider = "zod-prisma"
//   output   = "./generated/zod"

//   // relationModel            = true
//   // relationModel         = "default" // Do not export model without relations.
//   // relationModel         = false // Do not generate related model

//   modelCase = "PascalCase"
//   // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

//   modelSuffix = "Model"

//   // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
//   // useDecimalJs             = true/

//   // imports                  = null

//   // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
//   prismaJsonNullability = true
//   // prismaJsonNullability = false // allows null assignment to optional JSON fields
// }

model User {
  /// The unique identifier for the user.
  /// @default {Generated by database}
  /// @zod.id
  id        String    @id @default(cuid())
  /// @zod.email()
  name      String
  email     String    @unique
  /// @zod.min(6)
  password  String
  role      UserRole  @default(USER)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("users")
}

enum UserRole {
  ADMIN
  EDITOR
  USER
}

model Tayartaw {
  id        String    @id @default(cuid())
  title      String
  cover      String
  path      String
  description     String
  Sayartaw         Sayartaw?          @relation(fields: [sayartawId], references: [id])
  sayartawId       String?
  CategoryTayartaw CategoryTayartaw[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("tayartaws")
}

model Sayartaw {
  id        String     @id @default(cuid())
  name      String
  cover     String
  bio       String

  tayartaws Tayartaw[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("sayartaws")
}

model Category {
  id               String             @id @default(cuid())
  image            String
  name             String
  parentId        String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  CategoryTayartaw CategoryTayartaw[]
}

model CategoryTayartaw {
  id           String   @id @default(cuid())
  name         String
  tayartawId  String
  categoryId  String
  product      Tayartaw @relation(fields: [tayartawId], references: [id])
  category     Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog{
  id        String    @id @default(cuid())
  title      String
  cover      String
  slug       String  @unique
  markdown   String
  content    String
  rendered_markdown String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
